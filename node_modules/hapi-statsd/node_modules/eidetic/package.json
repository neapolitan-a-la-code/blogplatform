{
  "name": "eidetic",
  "description": "A Node JS module for storing objects in a memory-based cache.",
  "contributors": [
    {
      "name": "Mac Angell",
      "email": "mac.ang311@gmail.com"
    }
  ],
  "version": "0.1.1",
  "dependencies": {
    "underscore": "1.x.x",
    "clone": "0.1.x"
  },
  "devDependencies": {
    "mocha": "1.x.x",
    "jshint": "0.6.x"
  },
  "keywords": [
    "cache",
    "memory"
  ],
  "engines": {
    "node": ">= 0.6.0"
  },
  "main": "./lib/eidetic.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/mac-/eidetic"
  },
  "scripts": {
    "test": "make test"
  },
  "readme": "eidetic\n===\n\nEidetic is a NodeJS module that will cache JS values in memory. Features of the module include:\n\n* A configurable cache size with intelligent removal of items when the size is full.\n* An optional sliding expiration per cached item\n* Provides stats including cache hits, misses, and current number of items in the cache\n* 100% unit test coverage\n\n[![Build Status](https://secure.travis-ci.org/mac-/eidetic.png)](http://travis-ci.org/mac-/eidetic)\n\nInstallation\n===\n\tnpm install eidetic\n\nUsage\n===\n\nThe put method is used to store a value for a given key in the cache:\n\n\tput(key:String, value:*, [durationSeconds:Number], [useSlidingExpiration:Boolean])\n\n* key - required, a unique string that is used to access the value\n* value - required, the value to store in the cache\n* durationSeconds - optional (default is 1), the number of seconds to hold the value in the cache\n* useSlidingExpiration - optional (default is false), whether or not to refresh the expiration on a cache hit\n* returns true if the put was successful, false otherwise\n\nThe get method is used to retrieve values from the cache:\n\n\tget(key:String)\n\n* key - required, a unique string that is used to access the value\n* returns the JS object that was stored with the corresponding key, or undefined if no entry was found\n\nThe del method is used to remove a specific item from the cache:\n\n\tdel(key:String)\n\n* key - required, a unique string that is used to access the value\n* returns true if there was an entry that was successfully removed from the cache\n\nThe clear method is used to empty the entire cache:\n\n\tclear()\n\nThe following methods can be called to get stats on the cache:\n\n\thits()\n\tmisses()\n\tcurrentSize()\n\nThe following are publically available properties:\n\t\n\tmaxSize (Number, defaults to 500) - The max number of items that can live in the cache\n\tcanPutWhenFull (Boolean, defaults to false) - When trying to put to a full cache, if set to true, eidetic will remove the least recently used entry to  make room for the one you are currently storing. If set to false, the storing of the entry will fail.\n\nValid options to pass to the constructor:\n\t\n\tmaxSize (see above)\n\tcanPutWhenFull (see above)\n\tlogger (an instance of your own logging object)\n\nHere is an example:\n\n\tvar Cache = require('eidetic');\n\tvar options = {\n\t\tmaxSize: 100,\n\t\tcanPutWhenFull: true\n\t};\n\tvar cache = new Cache(options);\n\n\tcache.put('key', {my: 'obj'}, 60, true);\n\t\n\tvar cachedValue = cache.get('key'); // {my: 'obj'}\n\tcache.del('key');\n\n\tcachedValue = cache.get('key'); // undefined\n\t\t\n\nLicense\n===\nThe MIT License (MIT) Copyright (c) 2012 Mac Angell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n",
  "_id": "eidetic@0.1.1",
  "dist": {
    "shasum": "7febd97a3e687b0ddbed92fc2a84cff7fea4ef16",
    "tarball": "http://registry.npmjs.org/eidetic/-/eidetic-0.1.1.tgz"
  },
  "_npmVersion": "1.1.59",
  "_npmUser": {
    "name": "mac-",
    "email": "mac.ang311@gmail.com"
  },
  "maintainers": [
    {
      "name": "mac-",
      "email": "mac.ang311@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "7febd97a3e687b0ddbed92fc2a84cff7fea4ef16",
  "_resolved": "https://registry.npmjs.org/eidetic/-/eidetic-0.1.1.tgz",
  "_from": "eidetic@>=0.0.0 <1.0.0"
}
